{
  "projectName": "my-cli",
  "metadata": {
    "author": null,
    "commit-message": "INITIAL_SNAPSHOT",
    "date": "2025-08-24"
  },
  "files": [
    {
      "path": "/.gitignore",
      "content": "\r\n\r\n# Node dependencies\r\nnode_modules/\r\n\r\n# Logs\r\nlogs\r\n*.log\r\nnpm-debug.log*\r\nyarn-debug.log*\r\nyarn-error.log*\r\n\r\n# Environment variables\r\n.env\r\n.env.local\r\n.env.*.local\r\n\r\n# Build output\r\ndist/\r\nbuild/\r\nout/\r\n\r\n# Temporary files\r\n.tmp/\r\ntemp/\r\n\r\n# OS generated files\r\n.DS_Store\r\nThumbs.db\r\n\r\n# IDE specific\r\n.vscode/\r\n.idea/\r\n*.swp\r\n\r\n# Coverage reports\r\ncoverage/\r\n\r\n# Optional npm package lock files\r\npackage-lock.json\r\nyarn.lock\r\npnpm-lock.yaml\r\n"
    },
    {
      "path": "/package-lock.json",
      "content": "{\r\n  \"name\": \"ghost-writer\",\r\n  \"version\": \"1.0.0\",\r\n  \"lockfileVersion\": 3,\r\n  \"requires\": true,\r\n  \"packages\": {\r\n    \"\": {\r\n      \"name\": \"ghost-writer\",\r\n      \"version\": \"1.0.0\",\r\n      \"dependencies\": {\r\n        \"chalk\": \"^5.3.0\",\r\n        \"commander\": \"^14.0.0\",\r\n        \"figlet\": \"^1.8.2\",\r\n        \"gradient-string\": \"^3.0.0\",\r\n        \"inquirer\": \"^9.2.0\",\r\n        \"node-fetch\": \"^3.3.2\",\r\n        \"ora\": \"^7.0.1\"\r\n      },\r\n      \"bin\": {\r\n        \"gw\": \"bin/index.js\"\r\n      }\r\n    },\r\n    \"node_modules/@inquirer/figures\": {\r\n      \"version\": \"1.0.13\",\r\n      \"resolved\": \"https://registry.npmjs.org/@inquirer/figures/-/figures-1.0.13.tgz\",\r\n      \"integrity\": \"sha512-lGPVU3yO9ZNqA7vTYz26jny41lE7yoQansmqdMLBEfqaGsmdg7V3W9mK9Pvb5IL4EVZ9GnSDGMO/cJXud5dMaw==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=18\"\r\n      }\r\n    },\r\n    \"node_modules/@types/tinycolor2\": {\r\n      \"version\": \"1.4.6\",\r\n      \"resolved\": \"https://registry.npmjs.org/@types/tinycolor2/-/tinycolor2-1.4.6.tgz\",\r\n      \"integrity\": \"sha512-iEN8J0BoMnsWBqjVbWH/c0G0Hh7O21lpR2/+PrvAVgWdzL7eexIFm4JN/Wn10PTcmNdtS6U67r499mlWMXOxNw==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/ansi-escapes\": {\r\n      \"version\": \"4.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz\",\r\n      \"integrity\": \"sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"type-fest\": \"^0.21.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/ansi-regex\": {\r\n      \"version\": \"5.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz\",\r\n      \"integrity\": \"sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/ansi-styles\": {\r\n      \"version\": \"4.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz\",\r\n      \"integrity\": \"sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"color-convert\": \"^2.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/ansi-styles?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/base64-js\": {\r\n      \"version\": \"1.5.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz\",\r\n      \"integrity\": \"sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/bl\": {\r\n      \"version\": \"5.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bl/-/bl-5.1.0.tgz\",\r\n      \"integrity\": \"sha512-tv1ZJHLfTDnXE6tMHv73YgSJaWR2AFuPwMntBe7XL/GBFHnT0CLnsHMogfk5+GzCDC5ZWarSCYaIGATZt9dNsQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"buffer\": \"^6.0.3\",\r\n        \"inherits\": \"^2.0.4\",\r\n        \"readable-stream\": \"^3.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/buffer\": {\r\n      \"version\": \"6.0.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz\",\r\n      \"integrity\": \"sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"base64-js\": \"^1.3.1\",\r\n        \"ieee754\": \"^1.2.1\"\r\n      }\r\n    },\r\n    \"node_modules/chalk\": {\r\n      \"version\": \"5.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-5.6.0.tgz\",\r\n      \"integrity\": \"sha512-46QrSQFyVSEyYAgQ22hQ+zDa60YHA4fBstHmtSApj1Y5vKtG27fWowW03jCk5KcbXEWPZUIR894aARCA/G1kfQ==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \"^12.17.0 || ^14.13 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/chardet\": {\r\n      \"version\": \"0.7.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz\",\r\n      \"integrity\": \"sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/cli-cursor\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-VGtlMu3x/4DOtIUwEkRezxUZ2lBacNJCHash0N0WeZDBS+7Ux1dm3XWAgWYxLJFMMdOeXMHXorshEFhbMSGelg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"restore-cursor\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/cli-spinners\": {\r\n      \"version\": \"2.9.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-spinners/-/cli-spinners-2.9.2.tgz\",\r\n      \"integrity\": \"sha512-ywqV+5MmyL4E7ybXgKys4DugZbX0FC6LnwrhjuykIjnK9k8OQacQ7axGKnjDXWNhns0xot3bZI5h55H8yo9cJg==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/cli-width\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==\",\r\n      \"license\": \"ISC\",\r\n      \"engines\": {\r\n        \"node\": \">= 12\"\r\n      }\r\n    },\r\n    \"node_modules/clone\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/clone/-/clone-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-JQHZ2QMW6l3aH/j6xCqQThY/9OH4D/9ls34cgkUBiEeocRTU04tHfKPBsUK1PqZCUQM7GiA0IIXJSuXHI64Kbg==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=0.8\"\r\n      }\r\n    },\r\n    \"node_modules/color-convert\": {\r\n      \"version\": \"2.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz\",\r\n      \"integrity\": \"sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"color-name\": \"~1.1.4\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=7.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/color-name\": {\r\n      \"version\": \"1.1.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz\",\r\n      \"integrity\": \"sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/commander\": {\r\n      \"version\": \"14.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/commander/-/commander-14.0.0.tgz\",\r\n      \"integrity\": \"sha512-2uM9rYjPvyq39NwLRqaiLtWHyDC1FvryJDa2ATTVims5YAS4PupsEQsDvP14FqhFr0P49CYDugi59xaxJlTXRA==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=20\"\r\n      }\r\n    },\r\n    \"node_modules/data-uri-to-buffer\": {\r\n      \"version\": \"4.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-4.0.1.tgz\",\r\n      \"integrity\": \"sha512-0R9ikRb668HB7QDxT1vkpuUBtqc53YyAwMwGeUFKRojY/NWKvdZ+9UYtRfGmhqNbRkTSVpMbmyhXipFFv2cb/A==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">= 12\"\r\n      }\r\n    },\r\n    \"node_modules/defaults\": {\r\n      \"version\": \"1.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/defaults/-/defaults-1.0.4.tgz\",\r\n      \"integrity\": \"sha512-eFuaLoy/Rxalv2kr+lqMlUnrDWV+3j4pljOIJgLIhI058IQfWJ7vXhyEIHu+HtC738klGALYxOKDO0bQP3tg8A==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"clone\": \"^1.0.2\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/eastasianwidth\": {\r\n      \"version\": \"0.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz\",\r\n      \"integrity\": \"sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/emoji-regex\": {\r\n      \"version\": \"8.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz\",\r\n      \"integrity\": \"sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/external-editor\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"chardet\": \"^0.7.0\",\r\n        \"iconv-lite\": \"^0.4.24\",\r\n        \"tmp\": \"^0.0.33\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=4\"\r\n      }\r\n    },\r\n    \"node_modules/fetch-blob\": {\r\n      \"version\": \"3.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/fetch-blob/-/fetch-blob-3.2.0.tgz\",\r\n      \"integrity\": \"sha512-7yAQpD2UMJzLi1Dqv7qFYnPbaPx7ZfFK6PiIxQ4PfkGPyNyl2Ugx+a/umUonmKqjhM4DnfbMvdX6otXq83soQQ==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/jimmywarting\"\r\n        },\r\n        {\r\n          \"type\": \"paypal\",\r\n          \"url\": \"https://paypal.me/jimmywarting\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"node-domexception\": \"^1.0.0\",\r\n        \"web-streams-polyfill\": \"^3.0.3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.20 || >= 14.13\"\r\n      }\r\n    },\r\n    \"node_modules/figlet\": {\r\n      \"version\": \"1.8.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/figlet/-/figlet-1.8.2.tgz\",\r\n      \"integrity\": \"sha512-iPCpE9B/rOcjewIzDnagP9F2eySzGeHReX8WlrZQJkqFBk2wvq8gY0c6U6Hd2y9HnX1LQcYSeP7aEHoPt6sVKQ==\",\r\n      \"license\": \"MIT\",\r\n      \"bin\": {\r\n        \"figlet\": \"bin/index.js\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 0.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/formdata-polyfill\": {\r\n      \"version\": \"4.0.10\",\r\n      \"resolved\": \"https://registry.npmjs.org/formdata-polyfill/-/formdata-polyfill-4.0.10.tgz\",\r\n      \"integrity\": \"sha512-buewHzMvYL29jdeQTVILecSaZKnt/RJWjoZCF5OW60Z67/GmSLBkOFM7qh1PI3zFNtJbaZL5eQu1vLfazOwj4g==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"fetch-blob\": \"^3.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12.20.0\"\r\n      }\r\n    },\r\n    \"node_modules/gradient-string\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/gradient-string/-/gradient-string-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-frdKI4Qi8Ihp4C6wZNB565de/THpIaw3DjP5ku87M+N9rNSGmPTjfkq61SdRXB7eCaL8O1hkKDvf6CDMtOzIAg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"chalk\": \"^5.3.0\",\r\n        \"tinygradient\": \"^1.1.5\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=14\"\r\n      }\r\n    },\r\n    \"node_modules/has-flag\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/iconv-lite\": {\r\n      \"version\": \"0.4.24\",\r\n      \"resolved\": \"https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz\",\r\n      \"integrity\": \"sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"safer-buffer\": \">= 2.1.2 < 3\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/ieee754\": {\r\n      \"version\": \"1.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz\",\r\n      \"integrity\": \"sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"license\": \"BSD-3-Clause\"\r\n    },\r\n    \"node_modules/inherits\": {\r\n      \"version\": \"2.0.4\",\r\n      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\r\n      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\",\r\n      \"license\": \"ISC\"\r\n    },\r\n    \"node_modules/inquirer\": {\r\n      \"version\": \"9.3.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/inquirer/-/inquirer-9.3.7.tgz\",\r\n      \"integrity\": \"sha512-LJKFHCSeIRq9hanN14IlOtPSTe3lNES7TYDTE2xxdAy1LS5rYphajK1qtwvj3YmQXvvk0U2Vbmcni8P9EIQW9w==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@inquirer/figures\": \"^1.0.3\",\r\n        \"ansi-escapes\": \"^4.3.2\",\r\n        \"cli-width\": \"^4.1.0\",\r\n        \"external-editor\": \"^3.1.0\",\r\n        \"mute-stream\": \"1.0.0\",\r\n        \"ora\": \"^5.4.1\",\r\n        \"run-async\": \"^3.0.0\",\r\n        \"rxjs\": \"^7.8.1\",\r\n        \"string-width\": \"^4.2.3\",\r\n        \"strip-ansi\": \"^6.0.1\",\r\n        \"wrap-ansi\": \"^6.2.0\",\r\n        \"yoctocolors-cjs\": \"^2.1.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=18\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/bl\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/bl/-/bl-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"buffer\": \"^5.5.0\",\r\n        \"inherits\": \"^2.0.4\",\r\n        \"readable-stream\": \"^3.4.0\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/buffer\": {\r\n      \"version\": \"5.7.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz\",\r\n      \"integrity\": \"sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"base64-js\": \"^1.3.1\",\r\n        \"ieee754\": \"^1.1.13\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/chalk\": {\r\n      \"version\": \"4.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz\",\r\n      \"integrity\": \"sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^4.1.0\",\r\n        \"supports-color\": \"^7.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/chalk?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/cli-cursor\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"restore-cursor\": \"^3.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/is-interactive\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-interactive/-/is-interactive-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-2HvIEKRoqS62guEC+qBjpvRubdX910WCMuJTZ+I9yvqKU2/12eSL549HMwtabb4oupdj2sMP50k+XJfB/8JE6w==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/is-unicode-supported\": {\r\n      \"version\": \"0.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-0.1.0.tgz\",\r\n      \"integrity\": \"sha512-knxG2q4UC3u8stRGyAVJCOdxFmv5DZiRcdlIaAQXAbSfJya+OhopNotLQrstBhququ4ZpuKbDc/8S6mgXgPFPw==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/log-symbols\": {\r\n      \"version\": \"4.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/log-symbols/-/log-symbols-4.1.0.tgz\",\r\n      \"integrity\": \"sha512-8XPvpAA8uyhfteu8pIvQxpJZ7SYYdpUivZpGy6sFsBuKRY/7rQGavedeB8aK+Zkyq6upMFVL/9AW6vOYzfRyLg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"chalk\": \"^4.1.0\",\r\n        \"is-unicode-supported\": \"^0.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/ora\": {\r\n      \"version\": \"5.4.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ora/-/ora-5.4.1.tgz\",\r\n      \"integrity\": \"sha512-5b6Y85tPxZZ7QytO+BQzysW31HJku27cRIlkbAXaNx+BdcVi+LlRFmVXzeF6a7JCwJpyw5c4b+YSVImQIrBpuQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"bl\": \"^4.1.0\",\r\n        \"chalk\": \"^4.1.0\",\r\n        \"cli-cursor\": \"^3.1.0\",\r\n        \"cli-spinners\": \"^2.5.0\",\r\n        \"is-interactive\": \"^1.0.0\",\r\n        \"is-unicode-supported\": \"^0.1.0\",\r\n        \"log-symbols\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\",\r\n        \"wcwidth\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/inquirer/node_modules/restore-cursor\": {\r\n      \"version\": \"3.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz\",\r\n      \"integrity\": \"sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"onetime\": \"^5.1.0\",\r\n        \"signal-exit\": \"^3.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/is-fullwidth-code-point\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/is-interactive\": {\r\n      \"version\": \"2.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-interactive/-/is-interactive-2.0.0.tgz\",\r\n      \"integrity\": \"sha512-qP1vozQRI+BMOPcjFzrjXuQvdak2pHNUMZoeG2eRbiSqyvbEf/wQtEOTOX1guk6E3t36RkaqiSt8A/6YElNxLQ==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/is-unicode-supported\": {\r\n      \"version\": \"1.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz\",\r\n      \"integrity\": \"sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/log-symbols\": {\r\n      \"version\": \"5.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/log-symbols/-/log-symbols-5.1.0.tgz\",\r\n      \"integrity\": \"sha512-l0x2DvrW294C9uDCoQe1VSU4gf529FkSZ6leBl4TiqZH/e+0R7hSfHQBNut2mNygDgHwvYHfFLn6Oxb3VWj2rA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"chalk\": \"^5.0.0\",\r\n        \"is-unicode-supported\": \"^1.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/mimic-fn\": {\r\n      \"version\": \"2.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz\",\r\n      \"integrity\": \"sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      }\r\n    },\r\n    \"node_modules/mute-stream\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==\",\r\n      \"license\": \"ISC\",\r\n      \"engines\": {\r\n        \"node\": \"^14.17.0 || ^16.13.0 || >=18.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/node-domexception\": {\r\n      \"version\": \"1.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz\",\r\n      \"integrity\": \"sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==\",\r\n      \"deprecated\": \"Use your platform's native DOMException instead\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/jimmywarting\"\r\n        },\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://paypal.me/jimmywarting\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=10.5.0\"\r\n      }\r\n    },\r\n    \"node_modules/node-fetch\": {\r\n      \"version\": \"3.3.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-3.3.2.tgz\",\r\n      \"integrity\": \"sha512-dRB78srN/l6gqWulah9SrxeYnxeddIG30+GOqK/9OlLVyLg3HPnr6SqOWTWOXKRwC2eGYCkZ59NNuSgvSrpgOA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"data-uri-to-buffer\": \"^4.0.0\",\r\n        \"fetch-blob\": \"^3.1.4\",\r\n        \"formdata-polyfill\": \"^4.0.10\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"type\": \"opencollective\",\r\n        \"url\": \"https://opencollective.com/node-fetch\"\r\n      }\r\n    },\r\n    \"node_modules/onetime\": {\r\n      \"version\": \"5.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz\",\r\n      \"integrity\": \"sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"mimic-fn\": \"^2.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=6\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/ora\": {\r\n      \"version\": \"7.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/ora/-/ora-7.0.1.tgz\",\r\n      \"integrity\": \"sha512-0TUxTiFJWv+JnjWm4o9yvuskpEJLXTcng8MJuKd+SzAzp2o+OP3HWqNhB4OdJRt1Vsd9/mR0oyaEYlOnL7XIRw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"chalk\": \"^5.3.0\",\r\n        \"cli-cursor\": \"^4.0.0\",\r\n        \"cli-spinners\": \"^2.9.0\",\r\n        \"is-interactive\": \"^2.0.0\",\r\n        \"is-unicode-supported\": \"^1.3.0\",\r\n        \"log-symbols\": \"^5.1.0\",\r\n        \"stdin-discarder\": \"^0.1.0\",\r\n        \"string-width\": \"^6.1.0\",\r\n        \"strip-ansi\": \"^7.1.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=16\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/ora/node_modules/ansi-regex\": {\r\n      \"version\": \"6.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.2.0.tgz\",\r\n      \"integrity\": \"sha512-TKY5pyBkHyADOPYlRT9Lx6F544mPl0vS5Ew7BJ45hA08Q+t3GjbueLliBWN3sMICk6+y7HdyxSzC4bWS8baBdg==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/ansi-regex?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/ora/node_modules/emoji-regex\": {\r\n      \"version\": \"10.4.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/emoji-regex/-/emoji-regex-10.4.0.tgz\",\r\n      \"integrity\": \"sha512-EC+0oUMY1Rqm4O6LLrgjtYDvcVYTy7chDnM4Q7030tP4Kwj3u/pR6gP9ygnp2CJMK5Gq+9Q2oqmrFJAz01DXjw==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/ora/node_modules/string-width\": {\r\n      \"version\": \"6.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-6.1.0.tgz\",\r\n      \"integrity\": \"sha512-k01swCJAgQmuADB0YIc+7TuatfNvTBVOoaUWJjTB9R4VJzR5vNWzf5t42ESVZFPS8xTySF7CAdV4t/aaIm3UnQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"eastasianwidth\": \"^0.2.0\",\r\n        \"emoji-regex\": \"^10.2.1\",\r\n        \"strip-ansi\": \"^7.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=16\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/ora/node_modules/strip-ansi\": {\r\n      \"version\": \"7.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz\",\r\n      \"integrity\": \"sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"ansi-regex\": \"^6.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=12\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/chalk/strip-ansi?sponsor=1\"\r\n      }\r\n    },\r\n    \"node_modules/os-tmpdir\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-D2FR03Vir7FIu45XBY20mTb+/ZSWB00sjU9jdQXt83gDrI4Ztz5Fs7/yy74g2N5SVQY4xY1qDr4rNddwYRVX0g==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=0.10.0\"\r\n      }\r\n    },\r\n    \"node_modules/readable-stream\": {\r\n      \"version\": \"3.6.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz\",\r\n      \"integrity\": \"sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"inherits\": \"^2.0.3\",\r\n        \"string_decoder\": \"^1.1.1\",\r\n        \"util-deprecate\": \"^1.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">= 6\"\r\n      }\r\n    },\r\n    \"node_modules/restore-cursor\": {\r\n      \"version\": \"4.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/restore-cursor/-/restore-cursor-4.0.0.tgz\",\r\n      \"integrity\": \"sha512-I9fPXU9geO9bHOt9pHHOhOkYerIMsmVaWB0rA2AI9ERh/+x/i7MV5HKBNrg+ljO5eoPVgCcnFuRjJ9uH6I/3eg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"onetime\": \"^5.1.0\",\r\n        \"signal-exit\": \"^3.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/run-async\": {\r\n      \"version\": \"3.0.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/run-async/-/run-async-3.0.0.tgz\",\r\n      \"integrity\": \"sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=0.12.0\"\r\n      }\r\n    },\r\n    \"node_modules/rxjs\": {\r\n      \"version\": \"7.8.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/rxjs/-/rxjs-7.8.2.tgz\",\r\n      \"integrity\": \"sha512-dhKf903U/PQZY6boNNtAGdWbG85WAbjT/1xYoZIC7FAY0yWapOBQVsVrDl58W86//e1VpMNBtRV4MaXfdMySFA==\",\r\n      \"license\": \"Apache-2.0\",\r\n      \"dependencies\": {\r\n        \"tslib\": \"^2.1.0\"\r\n      }\r\n    },\r\n    \"node_modules/safe-buffer\": {\r\n      \"version\": \"5.2.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz\",\r\n      \"integrity\": \"sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==\",\r\n      \"funding\": [\r\n        {\r\n          \"type\": \"github\",\r\n          \"url\": \"https://github.com/sponsors/feross\"\r\n        },\r\n        {\r\n          \"type\": \"patreon\",\r\n          \"url\": \"https://www.patreon.com/feross\"\r\n        },\r\n        {\r\n          \"type\": \"consulting\",\r\n          \"url\": \"https://feross.org/support\"\r\n        }\r\n      ],\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/safer-buffer\": {\r\n      \"version\": \"2.1.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz\",\r\n      \"integrity\": \"sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/signal-exit\": {\r\n      \"version\": \"3.0.7\",\r\n      \"resolved\": \"https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz\",\r\n      \"integrity\": \"sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==\",\r\n      \"license\": \"ISC\"\r\n    },\r\n    \"node_modules/stdin-discarder\": {\r\n      \"version\": \"0.1.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/stdin-discarder/-/stdin-discarder-0.1.0.tgz\",\r\n      \"integrity\": \"sha512-xhV7w8S+bUwlPTb4bAOUQhv8/cSS5offJuX8GQGq32ONF0ZtDWKfkdomM3HMRA+LhX6um/FZ0COqlwsjD53LeQ==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"bl\": \"^5.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/string_decoder\": {\r\n      \"version\": \"1.3.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz\",\r\n      \"integrity\": \"sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"safe-buffer\": \"~5.2.0\"\r\n      }\r\n    },\r\n    \"node_modules/string-width\": {\r\n      \"version\": \"4.2.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz\",\r\n      \"integrity\": \"sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"emoji-regex\": \"^8.0.0\",\r\n        \"is-fullwidth-code-point\": \"^3.0.0\",\r\n        \"strip-ansi\": \"^6.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/strip-ansi\": {\r\n      \"version\": \"6.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz\",\r\n      \"integrity\": \"sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"ansi-regex\": \"^5.0.1\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/supports-color\": {\r\n      \"version\": \"7.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz\",\r\n      \"integrity\": \"sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"has-flag\": \"^4.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/tinycolor2\": {\r\n      \"version\": \"1.6.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/tinycolor2/-/tinycolor2-1.6.0.tgz\",\r\n      \"integrity\": \"sha512-XPaBkWQJdsf3pLKJV9p4qN/S+fm2Oj8AIPo1BTUhg5oxkvm9+SVEGFdhyOz7tTdUTfvxMiAs4sp6/eZO2Ew+pw==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/tinygradient\": {\r\n      \"version\": \"1.1.5\",\r\n      \"resolved\": \"https://registry.npmjs.org/tinygradient/-/tinygradient-1.1.5.tgz\",\r\n      \"integrity\": \"sha512-8nIfc2vgQ4TeLnk2lFj4tRLvvJwEfQuabdsmvDdQPT0xlk9TaNtpGd6nNRxXoK6vQhN6RSzj+Cnp5tTQmpxmbw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"@types/tinycolor2\": \"^1.4.0\",\r\n        \"tinycolor2\": \"^1.0.0\"\r\n      }\r\n    },\r\n    \"node_modules/tmp\": {\r\n      \"version\": \"0.0.33\",\r\n      \"resolved\": \"https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz\",\r\n      \"integrity\": \"sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"os-tmpdir\": \"~1.0.2\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=0.6.0\"\r\n      }\r\n    },\r\n    \"node_modules/tslib\": {\r\n      \"version\": \"2.8.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz\",\r\n      \"integrity\": \"sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==\",\r\n      \"license\": \"0BSD\"\r\n    },\r\n    \"node_modules/type-fest\": {\r\n      \"version\": \"0.21.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz\",\r\n      \"integrity\": \"sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==\",\r\n      \"license\": \"(MIT OR CC0-1.0)\",\r\n      \"engines\": {\r\n        \"node\": \">=10\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    },\r\n    \"node_modules/util-deprecate\": {\r\n      \"version\": \"1.0.2\",\r\n      \"resolved\": \"https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz\",\r\n      \"integrity\": \"sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==\",\r\n      \"license\": \"MIT\"\r\n    },\r\n    \"node_modules/wcwidth\": {\r\n      \"version\": \"1.0.1\",\r\n      \"resolved\": \"https://registry.npmjs.org/wcwidth/-/wcwidth-1.0.1.tgz\",\r\n      \"integrity\": \"sha512-XHPEwS0q6TaxcvG85+8EYkbiCux2XtWG2mkc47Ng2A77BQu9+DqIOJldST4HgPkuea7dvKSj5VgX3P1d4rW8Tg==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"defaults\": \"^1.0.3\"\r\n      }\r\n    },\r\n    \"node_modules/web-streams-polyfill\": {\r\n      \"version\": \"3.3.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-3.3.3.tgz\",\r\n      \"integrity\": \"sha512-d2JWLCivmZYTSIoge9MsgFCZrt571BikcWGYkjC1khllbTeDlGqZ2D8vD8E/lJa8WGWbb7Plm8/XJYV7IJHZZw==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">= 8\"\r\n      }\r\n    },\r\n    \"node_modules/wrap-ansi\": {\r\n      \"version\": \"6.2.0\",\r\n      \"resolved\": \"https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz\",\r\n      \"integrity\": \"sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==\",\r\n      \"license\": \"MIT\",\r\n      \"dependencies\": {\r\n        \"ansi-styles\": \"^4.0.0\",\r\n        \"string-width\": \"^4.1.0\",\r\n        \"strip-ansi\": \"^6.0.0\"\r\n      },\r\n      \"engines\": {\r\n        \"node\": \">=8\"\r\n      }\r\n    },\r\n    \"node_modules/yoctocolors-cjs\": {\r\n      \"version\": \"2.1.3\",\r\n      \"resolved\": \"https://registry.npmjs.org/yoctocolors-cjs/-/yoctocolors-cjs-2.1.3.tgz\",\r\n      \"integrity\": \"sha512-U/PBtDf35ff0D8X8D0jfdzHYEPFxAI7jJlxZXwCSez5M3190m+QobIfh+sWDWSHMCWWJN2AWamkegn6vr6YBTw==\",\r\n      \"license\": \"MIT\",\r\n      \"engines\": {\r\n        \"node\": \">=18\"\r\n      },\r\n      \"funding\": {\r\n        \"url\": \"https://github.com/sponsors/sindresorhus\"\r\n      }\r\n    }\r\n  }\r\n}\r\n"
    },
    {
      "path": "/package.json",
      "content": "{\r\n  \"name\": \"ghost-writer\",\r\n  \"version\": \"1.0.0\",\r\n  \"description\": \"Generate JSON snapshots of your project on gw start + every commit\",\r\n  \"bin\": {\r\n    \"gw\": \"./bin/index.js\"\r\n  },\r\n  \"type\": \"module\",\r\n  \"dependencies\": {\r\n    \"chalk\": \"^5.3.0\",\r\n    \"commander\": \"^14.0.0\",\r\n    \"figlet\": \"^1.8.2\",\r\n    \"gradient-string\": \"^3.0.0\",\r\n    \"inquirer\": \"^9.2.0\",\r\n    \"node-fetch\": \"^3.3.2\",\r\n    \"ora\": \"^7.0.1\"\r\n  }\r\n}\r\n"
    },
    {
      "path": "/src/hookInstaller.js",
      "content": "import fs from \"fs\";\r\nimport path from \"path\";\r\nimport chalk from \"chalk\";\r\n\r\nexport function installHook() {\r\n  const gitDir = path.join(process.cwd(), \".git\");\r\n  if (!fs.existsSync(gitDir)) {\r\n    console.log(chalk.red(\"❌ Not a git repository\"));\r\n    return;\r\n  }\r\n\r\n  // Path to git hook\r\n  const hookPath = path.join(gitDir, \"hooks\", \"post-commit\");\r\n  // Path for helper file inside .gw\r\n  const gwHelper = path.join(process.cwd(), \".gw\", \"postCommit.js\");\r\n\r\n  // Ensure .gw folder exists\r\n  if (!fs.existsSync(path.join(process.cwd(), \".gw\"))) {\r\n    fs.mkdirSync(path.join(process.cwd(), \".gw\"));\r\n  }\r\n\r\n  // Write the git hook\r\n  const script = `#!/bin/sh\r\nnode .gw/postCommit.js\r\n`;\r\n  fs.writeFileSync(hookPath, script, { mode: 0o755 });\r\n  console.log(chalk.green(\"✅ post-commit hook installed\"));\r\n\r\n  // Write the .gw/postCommit.js if missing\r\n  if (!fs.existsSync(gwHelper)) {\r\n    fs.writeFileSync(\r\n      gwHelper,\r\n      `import { createSnapshot } from \"../src/snapshot.js\";\r\nimport { execSync } from \"child_process\";\r\n\r\n(function run() {\r\n  try {\r\n    const hash = execSync(\"git rev-parse --short HEAD\").toString().trim();\r\n    console.log(\"📸 Creating snapshot for commit:\", hash);\r\n    createSnapshot(\"commit-\" + hash);\r\n  } catch (e) {\r\n    console.error(\"❌ Hook failed:\", e.message);\r\n  }\r\n})();`\r\n    );\r\n    console.log(chalk.green(\"✅ .gw/postCommit.js created\"));\r\n  }\r\n}\r\n"
    },
    {
      "path": "/src/index.js",
      "content": "// import fs from \"fs\";\r\n// import path from \"path\";\r\n// import { execSync, spawnSync } from \"child_process\";\r\n// import chalk from \"chalk\";\r\n// import ora from \"ora\";\r\n// import figlet from \"figlet\";\r\n// import gradient from \"gradient-string\";\r\n\r\n// /**\r\n//  * UI helpers updated to match the old reference banner style:\r\n//  * - Uses figlet + gradient pastel multiline title \"Ghost Writer\" (ANSI Shadow)\r\n//  * - CyanBright subtitle line with top-hat emoji\r\n//  * - Keeps concise spinners and clear succeed/warn/error lines\r\n//  * - No logic changes, UI only\r\n//  */\r\n// const ui = {\r\n//   brand: chalk.cyanBright,\r\n//   success: chalk.green,\r\n//   warn: chalk.yellow,\r\n//   error: chalk.red,\r\n//   info: chalk.blueBright,\r\n//   dim: chalk.gray,\r\n//   accent: chalk.magentaBright,\r\n\r\n//   okIcon: chalk.green(\"✅\"),\r\n//   warnIcon: chalk.yellow(\"⚠️\"),\r\n//   errIcon: chalk.red(\"✗\"),\r\n//   dot: chalk.cyan(\"•\"),\r\n\r\n//   banner() {\r\n//     console.clear();\r\n//     const text = figlet.textSync(\"Ghost Writer\", { font: \"ANSI Shadow\" });\r\n//     console.log(gradient.pastel.multiline(text));\r\n//     console.log(chalk.cyanBright(\"🎩 Your AI-powered Git & Project Assistant\\n\"));\r\n//   },\r\n\r\n//   // Retain simple box/header helpers for structured sections if needed\r\n//   header(title) {\r\n//     const line = \"─\".repeat(Math.max(28, title.length + 2));\r\n//     console.log(this.accent(`\\n┌${line}┐`));\r\n//     console.log(this.accent(\"│ \") + this.brand(title) + this.accent(\" │\"));\r\n//     console.log(this.accent(`└${line}┘\\n`));\r\n//   },\r\n\r\n//   box(lines) {\r\n//     const width = Math.max(...lines.map(l => l.length));\r\n//     const top = \"─\".repeat(width + 2);\r\n//     console.log(this.accent(`\\n┌${top}┐`));\r\n//     for (const l of lines) {\r\n//       const pad = \" \".repeat(width - l.length);\r\n//       console.log(this.accent(\"│ \") + l + pad + this.accent(\" │\"));\r\n//     }\r\n//     console.log(this.accent(`└${top}┘\\n`));\r\n//   },\r\n\r\n//   spin(text) {\r\n//     return ora({\r\n//       text: this.brand(text),\r\n//       spinner: \"dots\",\r\n//     }).start();\r\n//   },\r\n\r\n//   lineOk(msg) {\r\n//     console.log(`${this.okIcon} ${this.success(msg)}`);\r\n//   },\r\n//   lineInfo(msg) {\r\n//     console.log(`${this.dot} ${this.info(msg)}`);\r\n//   },\r\n//   lineWarn(msg) {\r\n//     console.log(`${this.warnIcon} ${this.warn(msg)}`);\r\n//   },\r\n// };\r\n\r\n// function displayHeader() {\r\n//   // Updated to use old reference banner design\r\n//   ui.banner();\r\n//   console.log(ui.dim(\"Tip: All Git activity and project structure are tracked for AI assistance.\\n\"));\r\n// }\r\n\r\n// export async function start(cwd, { cliRoot }) {\r\n//   displayHeader();\r\n\r\n//   // Spinner lifecycle; LOGIC UNCHANGED\r\n//   let spinner = ui.spin(\"Initializing...\");\r\n//   await new Promise(res => setTimeout(res, 200));\r\n\r\n//   try {\r\n//     // Step 1: Git repository check\r\n//     spinner.text = ui.brand(\"Scanning for Git repository...\");\r\n//     await new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n//     let hasGit = true;\r\n//     try {\r\n//       execSync(\"git rev-parse --is-inside-work-tree\", { stdio: \"ignore\", cwd });\r\n//     } catch {\r\n//       hasGit = false;\r\n//     }\r\n\r\n//     spinner.stop();\r\n\r\n//     if (!hasGit) {\r\n//       spinner = ui.spin(\"Git not found – initializing repository...\");\r\n//       execSync(\"git init\", { stdio: \"inherit\", cwd });\r\n//       spinner.succeed(ui.success(\"Git repository initialized\"));\r\n//     } else {\r\n//       ui.lineOk(\"Git repository found\");\r\n//     }\r\n\r\n//     // Step 2: Repository structure\r\n//     spinner = ui.spin(\"Analyzing repository structure...\");\r\n//     await new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n//     let repoRoot = cwd;\r\n//     try {\r\n//       repoRoot = execSync(\"git rev-parse --show-toplevel\", { cwd })\r\n//         .toString()\r\n//         .trim();\r\n//     } catch { }\r\n\r\n//     spinner.succeed(ui.success(\"Repository analyzed\"));\r\n//     ui.lineInfo(`Repository root: ${chalk.white(path.relative(process.cwd(), repoRoot) || \".\")}`);\r\n\r\n//     // Step 3: Ghost-Writer directories\r\n//     spinner = ui.spin(\"Installing Ghost Writer core...\");\r\n//     await new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n//     const gwDir = path.join(repoRoot, \".gw\");\r\n//     const payloadDir = path.join(gwDir, \"payloads\");\r\n//     if (!fs.existsSync(gwDir)) fs.mkdirSync(gwDir, { recursive: true });\r\n//     if (!fs.existsSync(payloadDir)) fs.mkdirSync(payloadDir, { recursive: true });\r\n\r\n//     spinner.succeed(ui.success(\"Core directories ready\"));\r\n\r\n//     // Step 4: Payload generator\r\n//     spinner = ui.spin(\"Installing payload generator...\");\r\n//     await new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n//     const generatorPath = path.join(gwDir, \"generatePayload.cjs\");\r\n//     fs.writeFileSync(generatorPath, GENERATOR_CJS, { encoding: \"utf8\" });\r\n//     try { fs.chmodSync(generatorPath, 0o755); } catch { }\r\n\r\n//     spinner.succeed(ui.success(\"Payload generator installed\"));\r\n\r\n//     // Step 5: Git hooks\r\n//     spinner = ui.spin(\"Configuring Git hooks...\");\r\n//     await new Promise(resolve => setTimeout(resolve, 200));\r\n\r\n//     const hooksDir = path.join(repoRoot, \".git\", \"hooks\");\r\n//     if (!fs.existsSync(hooksDir)) fs.mkdirSync(hooksDir, { recursive: true });\r\n\r\n//     const hookSh = path.join(hooksDir, \"post-commit\");\r\n//     const hookCmd = path.join(hooksDir, \"post-commit.cmd\");\r\n\r\n//     fs.writeFileSync(\r\n//       hookSh,\r\n//       HOOK_SH_SCRIPT.replaceAll(\"{GEN_PATH}\", generatorPath),\r\n//       { encoding: \"utf8\", mode: 0o755 }\r\n//     );\r\n//     try { fs.chmodSync(hookSh, 0o755); } catch { }\r\n\r\n//     fs.writeFileSync(\r\n//       hookCmd,\r\n//       HOOK_CMD_SCRIPT.replaceAll(\"{GEN_PATH_WIN}\", generatorPath.replace(/\\//g, \"\\\\\"))\r\n//     );\r\n\r\n//     spinner.succeed(ui.success(\"Git hooks installed\"));\r\n\r\n//     // Step 6: Initial snapshot\r\n//     spinner = ui.spin(\"Creating initial project snapshot...\");\r\n//     await new Promise(resolve => setTimeout(resolve, 250));\r\n\r\n//     const res = spawnSync(process.execPath, [generatorPath, \"--initial\", \"true\"], {\r\n//       cwd: repoRoot,\r\n//       stdio: \"inherit\"\r\n//     });\r\n\r\n//     spinner.stop();\r\n\r\n//     if (res.status !== 0) {\r\n//       ui.lineWarn(\"Initial snapshot failed – see logs above\");\r\n//     } else {\r\n//       ui.lineOk(\"Initial snapshot created\");\r\n\r\n//       // Completion box\r\n//       ui.box([\r\n//         ui.success(\"Project ready\"),\r\n//         \"\",\r\n//         `${chalk.white(\"• Status:\")} ${chalk.green(\"Active\")}`,\r\n//         `${chalk.white(\"• Git hooks:\")} ${chalk.green(\"Installed (relaxed checks)\")}`,\r\n//         `${chalk.white(\"• Tracking:\")} ${chalk.green(\"Enabled – commits & structure\")}`,\r\n//       ]);\r\n\r\n//       console.log(ui.accent(\"✨ Ghost Writer is now watching your code & commits.\"));\r\n//       console.log(ui.dim(\"You can continue working normally; snapshots will be captured on commit.\\n\"));\r\n//     }\r\n//   } catch (err) {\r\n//     spinner.fail(ui.error(\"Initialization failed\"));\r\n//     ui.box([\r\n//       ui.error(\"Error detected\"),\r\n//       \"\",\r\n//       chalk.white(err && err.message ? err.message : \"Unknown error\"),\r\n//     ]);\r\n//     console.error(err);\r\n//     process.exit(1);\r\n//   }\r\n// }\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { execSync, spawnSync } from \"child_process\";\r\nimport chalk from \"chalk\";\r\nimport ora from \"ora\";\r\nimport figlet from \"figlet\";\r\nimport gradient from \"gradient-string\";\r\n\r\n/**\r\n * Ghost Writer – Supercharged UI v2\r\n * 🪄 Gradient ASCII Banner, emojis, concise spinners, and cool boxes\r\n */\r\nconst ui = {\r\n  brand: gradient.pastel.multiline,\r\n  success: chalk.greenBright,\r\n  warn: chalk.yellowBright,\r\n  error: chalk.redBright,\r\n  info: chalk.cyanBright,\r\n  dim: chalk.gray,\r\n  accent: chalk.magentaBright,\r\n\r\n  okIcon: \"✅\",\r\n  warnIcon: \"⚠️\",\r\n  errIcon: \"✗\",\r\n  dot: \"•\",\r\n\r\n  banner() {\r\n    console.clear();\r\n    const text = figlet.textSync(\"Ghost Writer\", { font: \"ANSI Shadow\" });\r\n    console.log(this.brand(text));\r\n    console.log(chalk.cyanBright(\"🎩 Your AI-Powered Git & Project Assistant\\n\"));\r\n  },\r\n\r\n  header(title) {\r\n    const line = \"─\".repeat(Math.max(28, title.length + 2));\r\n    console.log(this.accent(`\\n┌${line}┐`));\r\n    console.log(this.accent(\"│ \") + chalk.bold.cyanBright(title) + this.accent(\" │\"));\r\n    console.log(this.accent(`└${line}┘\\n`));\r\n  },\r\n\r\n  box(lines) {\r\n    const width = Math.max(...lines.map(l => l.length));\r\n    const top = \"─\".repeat(width + 2);\r\n    console.log(this.accent(`\\n┌${top}┐`));\r\n    lines.forEach(l => {\r\n      const pad = \" \".repeat(width - l.length);\r\n      console.log(this.accent(\"│ \") + l + pad + this.accent(\" │\"));\r\n    });\r\n    console.log(this.accent(`└${top}┘\\n`));\r\n  },\r\n\r\n  spin(text) {\r\n    return ora({ text: chalk.cyanBright(text), spinner: \"dots\" }).start();\r\n  },\r\n\r\n  lineOk(msg) {\r\n    console.log(`${this.okIcon} ${this.success(msg)}`);\r\n  },\r\n  lineInfo(msg) {\r\n    console.log(`${this.dot} ${this.info(msg)}`);\r\n  },\r\n  lineWarn(msg) {\r\n    console.log(`${this.warnIcon} ${this.warn(msg)}`);\r\n  },\r\n};\r\n\r\nfunction displayHeader() {\r\n  ui.banner();\r\n  console.log(ui.dim(\"💡 Tip: All Git activity & project structure are tracked for AI magic.\\n\"));\r\n}\r\n\r\nexport async function start(cwd, { cliRoot }) {\r\n  displayHeader();\r\n\r\n  let spinner = ui.spin(\"Initializing Ghost Writer...\");\r\n  await new Promise(res => setTimeout(res, 200));\r\n\r\n  try {\r\n    spinner.text = \"🔍 Scanning for Git repository...\";\r\n    await new Promise(r => setTimeout(r, 200));\r\n\r\n    let hasGit = true;\r\n    try { execSync(\"git rev-parse --is-inside-work-tree\", { stdio: \"ignore\", cwd }); }\r\n    catch { hasGit = false; }\r\n\r\n    spinner.stop();\r\n\r\n    if (!hasGit) {\r\n      spinner = ui.spin(\"🚀 Git not found – initializing repository...\");\r\n      execSync(\"git init\", { stdio: \"inherit\", cwd });\r\n      spinner.succeed(ui.success(\"Git repository initialized\"));\r\n    } else {\r\n      ui.lineOk(\"Git repository detected\");\r\n    }\r\n\r\n    spinner = ui.spin(\"🗂 Analyzing repository structure...\");\r\n    await new Promise(r => setTimeout(r, 200));\r\n\r\n    let repoRoot = cwd;\r\n    try { repoRoot = execSync(\"git rev-parse --show-toplevel\", { cwd }).toString().trim(); } catch {}\r\n\r\n    spinner.succeed(ui.success(\"Repository structure analyzed\"));\r\n    ui.lineInfo(`Root: ${chalk.white(path.relative(process.cwd(), repoRoot) || \".\")}`);\r\n\r\n    spinner = ui.spin(\"⚡ Installing Ghost Writer core...\");\r\n    await new Promise(r => setTimeout(r, 200));\r\n\r\n    const gwDir = path.join(repoRoot, \".gw\");\r\n    const payloadDir = path.join(gwDir, \"payloads\");\r\n    if (!fs.existsSync(gwDir)) fs.mkdirSync(gwDir, { recursive: true });\r\n    if (!fs.existsSync(payloadDir)) fs.mkdirSync(payloadDir, { recursive: true });\r\n\r\n    spinner.succeed(ui.success(\"Core directories ready\"));\r\n\r\n    spinner = ui.spin(\"🛠 Installing payload generator...\");\r\n    await new Promise(r => setTimeout(r, 200));\r\n\r\n    const generatorPath = path.join(gwDir, \"generatePayload.cjs\");\r\n    fs.writeFileSync(generatorPath, GENERATOR_CJS, { encoding: \"utf8\" });\r\n    try { fs.chmodSync(generatorPath, 0o755); } catch {}\r\n\r\n    spinner.succeed(ui.success(\"Payload generator installed\"));\r\n\r\n    spinner = ui.spin(\"🔗 Configuring Git hooks...\");\r\n    await new Promise(r => setTimeout(r, 200));\r\n\r\n    const hooksDir = path.join(repoRoot, \".git\", \"hooks\");\r\n    if (!fs.existsSync(hooksDir)) fs.mkdirSync(hooksDir, { recursive: true });\r\n\r\n    const hookSh = path.join(hooksDir, \"post-commit\");\r\n    const hookCmd = path.join(hooksDir, \"post-commit.cmd\");\r\n\r\n    fs.writeFileSync(hookSh, HOOK_SH_SCRIPT.replaceAll(\"{GEN_PATH}\", generatorPath), { encoding: \"utf8\", mode: 0o755 });\r\n    fs.writeFileSync(hookCmd, HOOK_CMD_SCRIPT.replaceAll(\"{GEN_PATH_WIN}\", generatorPath.replace(/\\//g, \"\\\\\")));\r\n\r\n    spinner.succeed(ui.success(\"Git hooks installed\"));\r\n\r\n    spinner = ui.spin(\"📸 Creating initial snapshot...\");\r\n    await new Promise(r => setTimeout(r, 250));\r\n\r\n    const res = spawnSync(process.execPath, [generatorPath, \"--initial\", \"true\"], { cwd: repoRoot, stdio: \"inherit\" });\r\n    spinner.stop();\r\n\r\n    if (res.status !== 0) ui.lineWarn(\"Initial snapshot failed – see logs above\");\r\n    else {\r\n      ui.lineOk(\"Initial snapshot created\");\r\n\r\n      ui.box([\r\n        ui.success(\"🎉 Project Ready!\"),\r\n        \"\",\r\n        `${chalk.white(\"• Status:\")} ${chalk.greenBright(\"Active\")}`,\r\n        `${chalk.white(\"• Git hooks:\")} ${chalk.greenBright(\"Installed\")}`,\r\n        `${chalk.white(\"• Tracking:\")} ${chalk.greenBright(\"Enabled – commits & structure\")}`,\r\n      ]);\r\n\r\n      console.log(ui.accent(\"✨ Ghost Writer is now watching your code & commits.\"));\r\n      console.log(ui.dim(\"Work normally; snapshots are captured on commit.\\n\"));\r\n    }\r\n\r\n  } catch (err) {\r\n    spinner.fail(ui.error(\"Initialization failed\"));\r\n    ui.box([ui.error(\"Error detected\"), \"\", chalk.white(err?.message || \"Unknown error\")]);\r\n    console.error(err);\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\n\r\n\r\n// -------------------- embedded assets (LOGIC UNCHANGED) --------------------\r\n\r\nconst HOOK_SH_SCRIPT = `#!/usr/bin/env sh\r\n# Ghost-Writer post-commit hook (POSIX)\r\n# Resolve repo root (works on Windows Git Bash too)\r\nREPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)\r\nif [ -z \"$REPO_ROOT\" ]; then\r\n  REPO_ROOT=$(pwd)\r\nfi\r\n\r\nNODE_BIN=\"node\"\r\nif [ -n \"$GHOST_WRITER_NODE\" ]; then\r\n  NODE_BIN=\"$GHOST_WRITER_NODE\"\r\nfi\r\n\r\necho \"[Ghost-Writer] Running post-commit hook…\"\r\n\"$NODE_BIN\" \"{GEN_PATH}\" --fromHook true\r\n`;\r\n\r\nconst HOOK_CMD_SCRIPT = `@echo off\r\nREM Ghost-Writer post-commit hook (Windows CMD)\r\nfor /f \"delims=\" %%i in ('git rev-parse --show-toplevel 2^>NUL') do set REPO_ROOT=%%i\r\nif \"%REPO_ROOT%\"==\"\" set REPO_ROOT=%cd%\r\nset NODE_BIN=node\r\nif NOT \"%GHOST_WRITER_NODE%\"==\"\" set NODE_BIN=%GHOST_WRITER_NODE%\r\necho [Ghost-Writer] Running post-commit hook...\r\n\"%NODE_BIN%\" \"{GEN_PATH_WIN}\" --fromHook true\r\n`;\r\n\r\n// Generator kept logically identical; only its console styling uses simple ANSI (no gradient).\r\nconst GENERATOR_CJS = `#!/usr/bin/env node\r\n\r\nconst fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nconst { execSync } = require(\"child_process\");\r\nconst https = require(\"https\");\r\nconst http = require(\"http\");\r\nconst { URL } = require(\"url\");\r\n\r\n// Simple ANSI styling for generator output (no extra deps)\r\nconst colors = {\r\n  blue: '\\\\x1b[94m',\r\n  green: '\\\\x1b[92m',\r\n  yellow: '\\\\x1b[93m',\r\n  red: '\\\\x1b[91m',\r\n  magenta: '\\\\x1b[95m',\r\n  dim: '\\\\x1b[90m',\r\n  reset: '\\\\x1b[0m'\r\n};\r\n\r\nconst ui = {\r\n  info: (msg) => console.log(\\`\\${colors.blue}•\\${colors.reset} \\${msg}\\`),\r\n  success: (msg) => console.log(\\`\\${colors.green}✅\\${colors.reset} \\${msg}\\`),\r\n  warning: (msg) => console.log(\\`\\${colors.yellow}⚠️\\${colors.reset} \\${msg}\\`),\r\n  error: (msg) => console.log(\\`\\${colors.red}✗\\${colors.reset} \\${msg}\\`),\r\n  connecting: (msg) => console.log(\\`\\${colors.magenta}↗\\${colors.reset} \\${msg}\\`),\r\n  offline: (msg) => console.log(\\`\\${colors.dim}⌁\\${colors.reset} \\${msg}\\`),\r\n  timeout: (msg) => console.log(\\`\\${colors.yellow}⏰\\${colors.reset} \\${msg}\\`)\r\n};\r\n\r\n// ---- Config\r\nconst IGNORE_DIRS = new Set([\r\n\".git\", \".gw\", \"node_modules\", \"dist\", \"build\", \"out\", \".next\", \"coverage\", \".cache\",\r\n\"target\", \"bin\", \"obj\", \".venv\", \"venv\", \"__pycache__\", \".idea\", \".vscode\"\r\n]);\r\n\r\nconst MAX_FILE_BYTES = 2 * 1024 * 1024; // 2MB per file\r\n\r\n// ---- HTTP Ingestion Function (unchanged logic)\r\nasync function ingestToBackend(payload, config) {\r\n  if (!config.electronUrl) {\r\n    ui.info(\"No backend URL configured, skipping ingestion\");\r\n    return false;\r\n  }\r\n\r\n  return new Promise((resolve) => {\r\n    try {\r\n      const url = new URL(config.electronUrl + '/ingest-commit');\r\n      const postData = JSON.stringify(payload);\r\n\r\n      const options = {\r\n        hostname: url.hostname,\r\n        port: url.port || (url.protocol === 'https:' ? 443 : 80),\r\n        path: url.pathname,\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': Buffer.byteLength(postData)\r\n        },\r\n        timeout: 30000\r\n      };\r\n\r\n      ui.connecting(\\`Sending to backend: \\${config.electronUrl}/ingest-commit\\`);\r\n\r\n      const client = url.protocol === 'https:' ? https : http;\r\n\r\n      const req = client.request(options, (res) => {\r\n        let data = '';\r\n        res.on('data', (chunk) => { data += chunk; });\r\n        res.on('end', () => {\r\n          try {\r\n            const result = JSON.parse(data);\r\n            if (result.success) {\r\n              ui.success(\\`Backend ingestion successful: \\${result.data.successful}/\\${result.data.total_files} files\\`);\r\n              resolve(true);\r\n            } else {\r\n              ui.error(\\`Backend ingestion failed: \\${result.error}\\`);\r\n              resolve(false);\r\n            }\r\n          } catch {\r\n            ui.error(\"Invalid response from backend\");\r\n            resolve(false);\r\n          }\r\n        });\r\n      });\r\n\r\n      req.on('error', (error) => {\r\n        if (error.code === 'ECONNREFUSED') {\r\n          ui.offline(\"Backend not running, data saved locally only\");\r\n        } else {\r\n          ui.warning(\\`Backend ingestion error: \\${error.message}\\`);\r\n        }\r\n        resolve(false);\r\n      });\r\n\r\n      req.on('timeout', () => {\r\n        ui.timeout(\"Backend request timeout\");\r\n        req.destroy();\r\n        resolve(false);\r\n      });\r\n\r\n      req.write(postData);\r\n      req.end();\r\n\r\n    } catch (error) {\r\n      ui.warning(\\`Backend ingestion error: \\${error.message}\\`);\r\n      resolve(false);\r\n    }\r\n  });\r\n}\r\n\r\n// ---- Utils (unchanged)\r\nfunction ensureDirSync(dir) { if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true }); }\r\n\r\nfunction writeFileSyncAtomic(filePath, data) { const tmp = filePath + \".tmp\"; fs.writeFileSync(tmp, data); fs.renameSync(tmp, filePath); }\r\n\r\nfunction looksBinary(buffer) {\r\n  const len = Math.min(buffer.length, 4096);\r\n  for (let i = 0; i < len; i++) if (buffer[i] === 0) return true;\r\n  let nonPrintable = 0;\r\n  for (let i = 0; i < len; i++) {\r\n    const c = buffer[i];\r\n    if (c === 9 || c === 10 || c === 13) continue;\r\n    if (c < 32 || c > 126) nonPrintable++;\r\n  }\r\n  return nonPrintable / len > 0.3;\r\n}\r\n\r\nfunction getRepoRoot() {\r\n  try { return execSync(\"git rev-parse --show-toplevel\").toString().trim(); }\r\n  catch { return process.cwd(); }\r\n}\r\n\r\nfunction getProjectName(repoRoot) { return path.basename(repoRoot); }\r\n\r\nfunction scanProject(rootDir) {\r\n  const files = [];\r\n  const root = path.resolve(rootDir);\r\n  (function walk(dir) {\r\n    const entries = fs.readdirSync(dir, { withFileTypes: true });\r\n    for (const entry of entries) {\r\n      const full = path.join(dir, entry.name);\r\n      const rel = path.relative(root, full);\r\n      if (!rel) continue;\r\n      if (entry.isDirectory()) {\r\n        if (IGNORE_DIRS.has(entry.name)) continue;\r\n        walk(full);\r\n      } else if (entry.isFile()) {\r\n        try {\r\n          const stat = fs.statSync(full);\r\n          if (stat.size > MAX_FILE_BYTES) continue;\r\n          const buf = fs.readFileSync(full);\r\n          if (looksBinary(buf)) continue;\r\n          const content = buf.toString(\"utf8\");\r\n          files.push({ path: \"/\" + rel.split(path.sep).join(\"/\"), content });\r\n        } catch {}\r\n      }\r\n    }\r\n  })(root);\r\n  return files;\r\n}\r\n\r\nfunction getCommitMeta() {\r\n  try {\r\n    const author = execSync(\"git log -1 --pretty=format:'%an'\").toString().trim().replace(/^'|'$/g, \"\");\r\n    const message = execSync(\"git log -1 --pretty=%B\").toString().trim();\r\n    const date = execSync(\"git log -1 --date=short --pretty=format:'%ad'\").toString().trim().replace(/^'|'$/g, \"\");\r\n    const hash = execSync(\"git rev-parse --short HEAD\").toString().trim();\r\n    return { author, message, date, hash };\r\n  } catch {\r\n    return null;\r\n  }\r\n}\r\n\r\nfunction todayShort() {\r\n  const d = new Date();\r\n  const yyyy = d.getFullYear();\r\n  const mm = String(d.getMonth() + 1).padStart(2, \"0\");\r\n  const dd = String(d.getDate()).padStart(2, \"0\");\r\n  return \\`\\${yyyy}-\\${mm}-\\${dd}\\`;\r\n}\r\n\r\nfunction loadConfig(repoRoot) {\r\n  const configPath = path.join(repoRoot, \".gw\", \"config.json\");\r\n  try {\r\n    if (fs.existsSync(configPath)) {\r\n      return JSON.parse(fs.readFileSync(configPath, \"utf8\"));\r\n    }\r\n  } catch {\r\n    ui.warning(\"Config file corrupt, using defaults\");\r\n  }\r\n  return {\r\n    electronUrl: \"http://localhost:3001\",\r\n    autoIngest: true\r\n  };\r\n}\r\n\r\nfunction saveConfig(repoRoot, config) {\r\n  const configPath = path.join(repoRoot, \".gw\", \"config.json\");\r\n  try {\r\n    writeFileSyncAtomic(configPath, JSON.stringify(config, null, 2));\r\n  } catch (e) {\r\n    ui.warning(\\`Could not save config: \\${e.message}\\`);\r\n  }\r\n}\r\n\r\n// ---- Main (unchanged logic)\r\n(async function main() {\r\n  const args = new Set(process.argv.slice(2));\r\n  const repoRoot = getRepoRoot();\r\n  const projectName = getProjectName(repoRoot);\r\n  const gwDir = path.join(repoRoot, \".gw\");\r\n  const payloadDir = path.join(gwDir, \"payloads\");\r\n\r\n  ensureDirSync(payloadDir);\r\n\r\n  const config = loadConfig(repoRoot);\r\n\r\n  const files = scanProject(repoRoot);\r\n\r\n  let metadata;\r\n  let outPath;\r\n  const fromHook = args.has(\"--fromHook\");\r\n  const isInitial = args.has(\"--initial\");\r\n\r\n  if (fromHook) {\r\n    const meta = getCommitMeta();\r\n    if (!meta) {\r\n      metadata = { author: null, \"commit-message\": \"UNKNOWN\", date: todayShort() };\r\n      outPath = path.join(payloadDir, \"commit-unknown.json\");\r\n    } else {\r\n      metadata = { \r\n        author: meta.author, \r\n        \"commit-message\": meta.message, \r\n        date: meta.date, \r\n        hash: meta.hash \r\n      };\r\n      outPath = path.join(payloadDir, \\`commit-\\${meta.hash}.json\\`);\r\n    }\r\n  } else if (isInitial) {\r\n    metadata = { author: null, \"commit-message\": \"INITIAL_SNAPSHOT\", date: todayShort() };\r\n    outPath = path.join(payloadDir, \"initial.json\");\r\n  } else {\r\n    const meta = getCommitMeta();\r\n    if (meta) {\r\n      metadata = { \r\n        author: meta.author, \r\n        \"commit-message\": meta.message, \r\n        date: meta.date, \r\n        hash: meta.hash \r\n      };\r\n      outPath = path.join(payloadDir, \\`commit-\\${meta.hash}.json\\`);\r\n    } else {\r\n      metadata = { author: null, \"commit-message\": \"MANUAL_SNAPSHOT\", date: todayShort() };\r\n      outPath = path.join(payloadDir, \"manual.json\");\r\n    }\r\n  }\r\n\r\n  const payload = { projectName, metadata, files };\r\n\r\n  // Always save JSON file locally\r\n  writeFileSyncAtomic(outPath, JSON.stringify(payload, null, 2));\r\n  ui.info(\\`Snapshot written: \\${path.relative(repoRoot, outPath)}\\`);\r\n\r\n  // Optionally send to backend\r\n  if (config.autoIngest !== false) {\r\n    const success = await ingestToBackend(payload, config);\r\n    if (success) {\r\n      config.lastIngestion = new Date().toISOString();\r\n      config.lastCommitHash = metadata.hash;\r\n      saveConfig(repoRoot, config);\r\n    }\r\n  } else {\r\n    ui.info(\"Auto-ingestion disabled in config\");\r\n  }\r\n})();`\r\n\r\n\r\n"
    },
    {
      "path": "/src/init.js",
      "content": "import fs from \"fs\";\r\nimport path from \"path\";\r\nimport chalk from \"chalk\";\r\nimport ora from \"ora\";\r\nimport { installHook } from \"./hookInstaller.js\";\r\nimport { createSnapshot } from \"./snapshot.js\";\r\n\r\nexport function initProject() {\r\n  const spinner = ora({\r\n    text: chalk.cyan(\"Initializing Ghost-Writer project...\"),\r\n    spinner: \"dots\",\r\n  }).start();\r\n\r\n  try {\r\n    const gwDir = path.join(process.cwd(), \".gw\");\r\n    if (!fs.existsSync(gwDir)) {\r\n      fs.mkdirSync(gwDir);\r\n    }\r\n\r\n    const payloadDir = path.join(gwDir, \"payloads\");\r\n    if (!fs.existsSync(payloadDir)) {\r\n      fs.mkdirSync(payloadDir);\r\n    }\r\n\r\n    spinner.succeed(chalk.green(\"Project initialized successfully!\"));\r\n    console.log(\r\n      chalk.gray(\"→\") +\r\n      chalk.white(\" Created \") +\r\n      chalk.cyan(\".gw/\") +\r\n      chalk.white(\" and \") +\r\n      chalk.cyan(\"payloads/\") +\r\n      chalk.white(\" directories\")\r\n    );\r\n\r\n    // Install git hook\r\n    const hookSpinner = ora({\r\n      text: chalk.yellow(\"Installing Git hooks...\"),\r\n      spinner: \"line\",\r\n    }).start();\r\n    installHook();\r\n    hookSpinner.succeed(chalk.green(\"Git hooks installed ✔\"));\r\n\r\n    // Create initial snapshot\r\n    const snapSpinner = ora({\r\n      text: chalk.yellow(\"Creating initial snapshot...\"),\r\n      spinner: \"line\",\r\n    }).start();\r\n    createSnapshot(\"initial\");\r\n    snapSpinner.succeed(chalk.green(\"Initial snapshot created ✔\"));\r\n\r\n    console.log(\r\n      \"\\n\" +\r\n      chalk.magentaBright(\"✨ Ghost-Writer is ready! ✨\") +\r\n      \"\\n\" +\r\n      chalk.gray(\"───────────────────────────────\") +\r\n      \"\\n\" +\r\n      chalk.white(\" Every commit will now:\") +\r\n      \"\\n\" +\r\n      chalk.gray(\"   • \") +\r\n      chalk.cyan(\"Generate JSON snapshots\") +\r\n      \"\\n\" +\r\n      chalk.gray(\"   • \") +\r\n      chalk.cyan(\"Store them in .gw/payloads/\") +\r\n      \"\\n\" +\r\n      chalk.gray(\"   • \") +\r\n      chalk.cyan(\"Auto-ingest to backend (if enabled)\") +\r\n      \"\\n\"\r\n    );\r\n  } catch (err) {\r\n    spinner.fail(chalk.red(\"Initialization failed ❌\"));\r\n    console.error(chalk.redBright(\"Error:\"), err.message);\r\n    process.exit(1);\r\n  }\r\n}\r\n"
    },
    {
      "path": "/src/snapshot.js",
      "content": "import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nexport function createSnapshot(name) {\r\n  const outDir = path.join(process.cwd(), \".gw\");\r\n  if (!fs.existsSync(outDir)) fs.mkdirSync(outDir);\r\n\r\n  const snapshotPath = path.join(outDir, `${name}.json`);\r\n  const projectFiles = fs.readdirSync(process.cwd()).filter(f => f !== \".git\" && f !== \".gw\");\r\n\r\n  const data = {\r\n    name,\r\n    timestamp: new Date().toISOString(),\r\n    files: projectFiles,\r\n  };\r\n\r\n  fs.writeFileSync(snapshotPath, JSON.stringify(data, null, 2));\r\n  console.log(\"✅ Snapshot saved:\", snapshotPath);\r\n}\r\n"
    },
    {
      "path": "/src/utils.js",
      "content": "import fs from \"fs\";\r\nimport path from \"path\";\r\n\r\nconst IGNORE_DIRS = new Set([\r\n  \".git\",\r\n  \".gw\",\r\n  \"node_modules\",\r\n  \"dist\",\r\n  \"build\",\r\n  \".next\",\r\n  \"out\",\r\n  \"coverage\",\r\n  \".cache\"\r\n]);\r\n\r\nexport function collectFiles(dir, base = dir) {\r\n  let files = [];\r\n  for (const entry of fs.readdirSync(dir, { withFileTypes: true })) {\r\n    if (IGNORE_DIRS.has(entry.name)) continue;\r\n\r\n    const fullPath = path.join(dir, entry.name);\r\n    const relPath = path.relative(base, fullPath);\r\n\r\n    if (entry.isDirectory()) {\r\n      files = files.concat(collectFiles(fullPath, base));\r\n    } else {\r\n      try {\r\n        // limit file size ~2MB\r\n        const stats = fs.statSync(fullPath);\r\n        if (stats.size > 2 * 1024 * 1024) continue;\r\n\r\n        const content = fs.readFileSync(fullPath, \"utf8\");\r\n        files.push({ path: relPath, content });\r\n      } catch {\r\n        continue;\r\n      }\r\n    }\r\n  }\r\n  return files;\r\n}\r\n"
    }
  ]
}